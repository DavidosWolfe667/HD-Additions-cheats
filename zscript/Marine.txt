// ------------------------------------------------------------
// Molon labe, Games Workshop.
// ------------------------------------------------------------
class HDMarine:HDActor{// replaces ScriptedMarine{
	default{
		monster;
		+friendly
		+quicktoretaliate
		height 52;
		radius 12;
		health 130;
		speed 16;
		maxdropoffheight 48;
		maxstepheight 48;
		maxtargetrange 65536;
		minmissilechance 24;
		mass 150;
		seesound "marine/sight";
		painchance 240;
		obituary "%o was shot up by a marine.";
		hitobituary "%o violated a marine's personal space.";

		accuracy 0; //set to hdmw_*+1
		stamina 0; //+1 for setting
	}
	double spread;
	double turnamount;
	int gunloaded;
	int gunmax;
	int gunspent;
	int pistolloaded;
	bool glloaded;
	int timesdied;
	bool hasdropped;
	int wep;
	override void die(actor source,actor inflictor,int dmgflags=0){
		timesdied++;
		bpushable=false;
		super.die(source,inflictor,dmgflags);
	}
	override void beginplay(){
		super.beginplay();
		hasdropped=false;
		spread=0;
		timesdied=0;
		if(bfriendly)bpushable=true;

		//weapon
		pistolloaded=15;
		glloaded=true;
		if(!accuracy)wep=clamp(random(0,3)-random(0,3),0,3);
		else wep=accuracy-1;

		if(wep==HDMW_ZM66)gunmax=50;
		else if(wep==HDMW_HUNTER)gunmax=8;
		else if(wep==HDMW_SMG)gunmax=30;
		else if(wep==HDMW_ROCKET)gunmax=6;
		gunloaded=gunmax;


		//appearance
		string trnsl="";
		if(self is "Tango")trnsl="Tango";else{
			if(wep==HDMW_ZM66)trnsl="Rifleman";
			else if(wep==HDMW_HUNTER)trnsl="Enforcer";
			else if(wep==HDMW_SMG)trnsl="Infiltrator";
			else if(wep==HDMW_ROCKET)trnsl="Rocketeer";
		}

		int melanin=stamina+1;
		if(!accuracy)melanin=random(0,2);
		if(!melanin)trnsl=string.format("White%s",trnsl);
		else if(melanin==1)trnsl=string.format("Brown%s",trnsl);
		else if(melanin==2)trnsl=string.format("Black%s",trnsl);

		A_SetTranslation(trnsl);

		if(random(0,1)){
			painsound="marinef/pain";
			deathsound="marinef/death";
		}else{
			painsound="marine/pain";
			deathsound="marine/death";
		}
	}
	virtual void A_HDMScream(){
		A_Scream();
	}
	override void postbeginplay(){
		super.postbeginplay();
		hdmobster.spawnmobster(self);
	}
	void noblockwepdrop(){
		A_NoBlocking();
		if(hasdropped){
			class<actor> dropammo="";
			if(wep==HDMW_SMG)dropammo="HDSMGMag";
			else if(wep==HDMW_ZM66)dropammo="HDPistolMag";
			else if(wep==HDMW_ROCKET)dropammo="HDRocketAmmo";
			else if(wep==HDMW_HUNTER)dropammo="ShellPickup";
			if(!random(0,timesdied))A_DropItem(dropammo);
			if(!random(0,12+timesdied))A_DropItem("HDPistolMag");
			if(
				!random(0,timesdied)&&wep==HDMW_SMG
			)A_DropItem("HDRocketAmmo");
		}else{
			hasdropped=true;
			hdweapon dropped;
			if(wep==HDMW_SMG){
				dropped=hdweapon(spawn("HDSMG",pos));
				if(gunloaded){
					dropped.weaponstatus[SMGS_MAG]=gunloaded-1;
					dropped.weaponstatus[SMGS_CHAMBER]=2;
				}else{
					dropped.weaponstatus[SMGS_MAG]=0;
					dropped.weaponstatus[SMGS_CHAMBER]=0;
				}
			}else if(wep==HDMW_ZM66){
				dropped=hdweapon(spawn("ZM66AssaultRifle",pos));
				if(gunloaded){
					dropped.weaponstatus[ZM66S_MAG]=gunloaded-1;
					dropped.weaponstatus[0]=ZM66F_CHAMBER;
				}else{
					dropped.weaponstatus[ZM66S_MAG]=0;
					dropped.weaponstatus[0]=0;
				}
				if(glloaded)dropped.weaponstatus[0]|=ZM66F_GRENADELOADED;
			}else if(wep==HDMW_ROCKET){
				dropped=hdweapon(spawn("HDRL",pos));
				if(gunloaded){
					dropped.weaponstatus[RLS_MAG]=gunloaded-1;
					dropped.weaponstatus[RLS_CHAMBER]=1;
				}else{
					dropped.weaponstatus[RLS_MAG]=0;
					dropped.weaponstatus[RLS_CHAMBER]=0;
				}
			}else if(wep==HDMW_HUNTER){
				dropped=hdweapon(spawn("Hunter",pos));
				if(gunloaded){
					dropped.weaponstatus[HUNTS_TUBE]=gunloaded-1;
					dropped.weaponstatus[HUNTS_CHAMBER]=2;
				}else{
					dropped.weaponstatus[HUNTS_TUBE]=0;
					dropped.weaponstatus[HUNTS_CHAMBER]=0;
				}
				dropped.weaponstatus[HUNTS_SIDESADDLE]=random(0,12);
				dropped.weaponstatus[0]=HUNTF_AUTO;
			}
			dropped.addz(32);
			dropped.vel=vel+(frandom(-1,1),frandom(-1,1),2);

			//drop the pistol
			dropped=hdweapon(spawn("HDPistol",pos));
			dropped.addz(32);
			dropped.vel=vel+(frandom(-1,1),frandom(-1,1),2);
			if(pistolloaded){
				dropped.weaponstatus[PISS_MAG]=pistolloaded-1;
				dropped.weaponstatus[PISS_CHAMBER]=2;
			}else{
				dropped.weaponstatus[PISS_MAG]=0;
				dropped.weaponstatus[PISS_CHAMBER]=0;
			}

			//drop the blooper
			if(wep!=HDMW_SMG&&wep!=HDMW_HUNTER)return;
			dropped=hdweapon(spawn("Blooper",pos));
			dropped.addz(32);
			dropped.vel=vel+(frandom(-1,1),frandom(-1,1),2);
			if(glloaded)dropped.weaponstatus[0]|=BLOPF_LOADED;
		}
	}

	//returns true if area around target is clear of friendlies
	bool A_CheckBlast(actor tgt=null,double checkradius=256){
		if(!tgt)tgt=target;
		if(!tgt)return true;
		blockthingsiterator itt=blockthingsiterator.create(tgt,checkradius);
		while(itt.next()){
			actor it=itt.thing;
			if(
				isfriend(it)||isteammate(it)
			)return false;
		}
		return true;
	}

	// #### E 1 A_LeadTarget1();
	// #### E 3{
	//	A_LeadTarget2(shotspeed:getdefaultbytype(missilename).speed);
	//	hdmobai.DropAdjust(self,missilename);
	// }
	// #### F 1 bright light("SHOT") A_MarineShot(missilename);
	// maybe generalize this later?
	vector2 leadoldaim;vector2 leadaim;
	vector2 A_LeadTarget1(){
		if(!target){
			leadoldaim=(angle,pitch);
			return leadoldaim;
		}
		vector2 aimbak=(angle,pitch);
		A_FaceTarget(0,0);
		leadoldaim=(angle,pitch);
		angle=aimbak.x;pitch=aimbak.y;
		return leadoldaim;
	}
	vector2 A_LeadTarget2(
		double dist=-1,
		double shotspeed=20,
		vector2 oldaim=(-1,-1),
		double adjusttics=1
	){
		if(!target||!shotspeed)return(0,0);

		//get current angle for final calculation
		vector2 aimbak=(angle,pitch);

		//distance defaults to distance from target
		if(dist<0)dist=distance3d(target);

		//figure out how many tics to adjust
		double ticstotarget=dist/shotspeed+adjusttics;
		if(ticstotarget<1.)return(0,0);

		//retrieve result from A_LeadTarget1
		if(oldaim==(-1,-1))oldaim=leadoldaim;

		//check the aim to change and revert immediately
		//I could use angleto but the pitch calculations would be awkward
		A_FaceTarget(0,0);
		vector2 aimadjust=(
			deltaangle(oldaim.x,angle),
			deltaangle(oldaim.y,pitch)
		);

		//something fishy is going on
		if(abs(aimadjust.x)>45)return (0,0);

		//multiply by tics
		aimadjust*=ticstotarget;

		//apply and return
		angle=aimbak.x+aimadjust.x;pitch=aimbak.y+aimadjust.y;
		return aimadjust;
	}
	actor A_MarineShot(class<actor> missiletype,bool userocket=false){
		actor mmm=spawn(missiletype,pos);
		mmm.pitch=pitch+frandom(0,spread)-frandom(0,spread);
		mmm.angle=angle+frandom(0,spread)-frandom(0,spread);
		mmm.addz(height-6);
		mmm.target=self;

		//one very special case
		if(userocket&&mmm is "GyroGrenade")gyrogrenade(mmm).isrocket=true;
		else userocket=false;

		if(!(mmm is "HDBullet")&&!(mmm is "SlowProjectile"))mmm.A_ChangeVelocity(
			mmm.speed*cos(mmm.pitch),0,mmm.speed*sin(mmm.pitch),CVF_RELATIVE
		);
		return mmm;
	}
	enum HDMarineStats{
		HDMW_ZM66=0,
		HDMW_HUNTER=1,
		HDMW_SMG=2,
		HDMW_ROCKET=3,

		HDMBC_WARPLIMIT=4,
	}
	states{
	spawn:
		PLAY A 0;
		#### AA 4{hdmobai.wander(self);}
		#### A 0 A_Look();
		#### BB 4{hdmobai.wander(self);}
		#### A 0 A_Look();
		#### CC 4{hdmobai.wander(self);}
		#### A 0 A_Look();
		#### DD 4{hdmobai.wander(self);}
		#### A 0 HealThing(1);
	spawn2:
		#### A 0 A_Jump(60,"spawn");
		#### A 0{angle+=random(-30,30);}
		#### EEE 3 A_Look();
		#### A 0{angle+=random(-30,30);}
		#### EEE 3 A_Look();
		#### A 0 A_Jump(60,"spawn");
		loop;
	see:
		#### AABBCCDD 2{hdmobai.chase(self);}
		#### A 0{
			if(health<40)damagemobj(self,self,1,"bleedout",DMG_NO_PAIN);
			else HealThing(1);
			A_SetSolid();
		}
		#### A 0{
			if(
				(
					//must reload
					!gunloaded
					&&(!pistolloaded||!random(0,3))
				)||(
					//may reload
					!random(0,7)
					&&(
						gunloaded<1
						||pistolloaded<1
						||(wep!=HDMW_ROCKET&&!glloaded)
					)
					&&(!target||!checksight(target))
				)
			)setstatelabel("reload");
		}
		#### E 0 A_JumpIfTargetInLOS("see");
	spwander:
		#### E 0 A_ClearTarget();
		#### AA 3{hdmobai.wander(self);}
		#### A 0 A_Chase(flags:CHF_DONTMOVE);
		#### BB 3{hdmobai.wander(self);}
		#### A 0 A_Chase(flags:CHF_DONTMOVE);
		#### CC 3{hdmobai.wander(self);}
		#### A 0 A_Chase(flags:CHF_DONTMOVE);
		#### DD 3{hdmobai.wander(self);}
		#### A 0 HealThing(1);
		#### E 0 A_Jump(128,"spwander");
	spwander2:
		#### A 0 A_Look();
		#### A 0 A_Jump(4,"spawn");
		#### A 0{angle+=random(-30,30);}
		#### EEE 2 A_Chase(flags:CHF_DONTMOVE);
		#### A 0{angle+=random(-30,30);}
		#### EEE 2 A_Chase(flags:CHF_DONTMOVE);
		#### A 0 A_Jump(60,"spwander");
		#### E 0 A_JumpIfTargetInLOS("see");
		goto spwander;

	missile:
		#### A 0{
			if(
				(
					//must reload
					!gunloaded
					&&!pistolloaded
				)
			)setstatelabel("reload");
		}
		#### A 0 A_JumpIfTargetInLOS(3,120);
		#### CD 2 A_FaceTarget(40);
	missile2:
		#### A 0{
			if(!target){
				setstatelabel("noshot");
				return;
			}
			double dist=distance3d(target);
			if(dist<500)turnamount=50;
			else if(dist<1200)turnamount=30;
			else turnamount=10;
		}
	turntoaim:
		#### E 2 A_FaceTarget(turnamount,turnamount);
		#### A 0 A_JumpIfTargetInLOS(1);
		goto see;
		#### A 0 A_JumpIfTargetInLOS(1,10);
		loop;
		#### A 0 A_FaceTarget(turnamount,turnamount);
		#### E 1 A_SetTics(random(0,80/turnamount));
		#### E 0{
			spread=turnamount*0.08;
			A_SetTics(15/spread);
			spread+=min(timesdied,15);
		}goto shoot;

	shoot:
		#### E 1{
			if(!target||(checksight(target)&&target.health<1)){
				target=null;
				setstatelabel("noshot");
				return;
			}
			A_FaceTarget(0,0); //can't lead without this
			double dist=distance3d(target);
			A_SetTics(clamp(dist*0.002,0,30));
		}
		#### E 4{	
			if(!target)return;
			double dist=distance3d(target);
			if(
				!hdmobai.tryshoot(self,
					range:min(1024,dist*1.1),
					pradius:min(target.radius*0.6,4),
					pheight:min(target.height*0.6,4)
				)
			){
				return;
			}

			//grenade
			if(
				dist<5000
				&&dist>600
				&&(
					(wep==HDMW_ROCKET&&gunloaded>0)
					||(glloaded&&!random(0,10))
				)
			){
				setstatelabel("shootgl");
				return;
			}

			//pistol
			if(
				gunloaded<1
				||(wep==HDMW_ROCKET&&dist<600)
			){
				if(pistolloaded<1||!random(0,3))setstatelabel("ohforfuckssake");
				else setstatelabel("shootpistol");
				return;
			}

			//all other guns
			if(wep==HDMW_SMG)setstatelabel("shootsmg");
			else if(wep==HDMW_HUNTER)setstatelabel("shootsg");
			else if(wep==HDMW_ZM66)setstatelabel("shootzm66");
			else if(wep==HDMW_ROCKET)setstatelabel("shootrl");
		}goto see;
	shootzm66:
		#### E 1;
		#### E 1 A_LeadTarget1();
		#### E 1{
			class<actor> mn="HDBullet426";
			A_LeadTarget2(shotspeed:getdefaultbytype(mn).speed,adjusttics:1);
			hdmobai.DropAdjust(self,mn);
			gunspent=min(gunloaded,randompick(1,1,1,1,1,3));
		}
	firezm66:
		#### FFF 1 bright light("SHOT"){
			if(gunloaded<1||gunspent<1)setstatelabel("firezm66end");
			gunloaded--;gunspent--;
			A_PlaySound("weapons/rifle",CHAN_WEAPON);
			A_MarineShot("HDBullet426");
		}
	firezm66end:
		#### E 2 A_AlertMonsters(0,bfriendly?AMF_TARGETEMITTER:0);
		#### E 0 A_JumpIf(gunloaded>0&&random(0,2),"firezm66");
		#### E 0 A_MonsterRefire(20,"see");
		goto missile;
	shootsmg:
		#### E 1 A_LeadTarget1();
		#### E 1{
			class<actor> mn="HDBullet9";
			A_LeadTarget2(shotspeed:getdefaultbytype(mn).speed,adjusttics:1);
			hdmobai.DropAdjust(self,mn);
		}
	firesmg:
		#### F 1 bright light("SHOT"){
			gunloaded--;
			A_PlaySound("weapons/pistol",CHAN_WEAPON,0.7);
			actor bbb=A_MarineShot("HDBullet9");
			bbb.A_ChangeVelocity(cos(bbb.pitch)*20,0,-sin(bbb.pitch)*20,CVF_RELATIVE);
			if(!random(0,7))A_AlertMonsters(0,bfriendly?AMF_TARGETEMITTER:0);
		}
		#### E 2 A_SpawnItemEx("HDSpent9mm",
			cos(pitch)*10,0,height-8-sin(pitch)*10,
			vel.x,vel.y,vel.z,
			0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		#### E 0 A_JumpIf(gunloaded>0&&random(0,2),"firesmg");
		#### E 0 A_MonsterRefire(20,"see");
		goto missile;
	shootsg:
		#### E 1;
		#### E 1 A_LeadTarget1();
		#### E 1{
			class<actor> mn="HDBullet00b";
			A_LeadTarget2(shotspeed:getdefaultbytype(mn).speed,adjusttics:1);
			hdmobai.DropAdjust(self,mn);
		}
		#### F 1 bright light("SHOT"){
			gunloaded--;
			A_PlaySound("weapons/hunter",CHAN_WEAPON);
			A_AlertMonsters(0,bfriendly?AMF_TARGETEMITTER:0);
			A_MarineShot("HDBullet00b");
		}
		#### E 2{
			if(random(0,4)){
				gunspent=0;
				A_SpawnItemEx("HDSpentShell",
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*6,
					vel.y+cos(pitch)*sin(angle-random(86,90))*6,
					vel.z+sin(pitch)*random(5,7),0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else gunspent=1;
		}
		#### E 1{
			if(gunspent){
				gunspent=0;
				A_PlaySound("weapons/shotgr",5);
				A_SetTics(random(4,6));
				A_SpawnItemEx("HDSpentShell",
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*6,
					vel.y+cos(pitch)*sin(angle-random(86,90))*6,
					vel.z+sin(pitch)*random(5,7),0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
		#### E 0 A_MonsterRefire(20,"see");
		goto missile;
	shootrl:
		#### E 2;
		#### E 1{
			if(A_CheckBlast(target))A_LeadTarget1();
			else setstatelabel("noshot");
		}
		#### E 1{
			class<actor> mn="GyroGrenade";
			A_LeadTarget2(shotspeed:getdefaultbytype(mn).speed*6.4,adjusttics:1);
			hdmobai.DropAdjust(self,mn,speedmult:6.4);
		}
		#### F 2 bright light("SHOT"){
			if(wep==HDMW_ROCKET)gunloaded--;else glloaded=false;
			A_PlaySound("weapons/rockignite",CHAN_WEAPON);
			A_PlaySound("weapons/bronto",5);
			A_MarineShot("GyroGrenade",userocket:true);
			A_AlertMonsters(0,bfriendly?AMF_TARGETEMITTER:0);
		}
		#### E 5{
			A_Recoil(-4);
			A_PlaySound("weapons/rocklaunch",CHAN_AUTO,0.6);
		}
		#### E 0 A_PlaySound("weapons/shotgr",5);
		goto see;
	shootgl:
		#### E 1{
			if(A_CheckBlast(target))A_LeadTarget1();
			else setstatelabel("noshot");
		}
		#### E 2{
			class<actor> mn="GyroGrenade";
			A_LeadTarget2(shotspeed:getdefaultbytype(mn).speed,adjusttics:2);
			hdmobai.DropAdjust(self,mn);
		}
		#### F 1 bright{
			if(wep==HDMW_ROCKET)gunloaded--;else glloaded=false;
			A_PlaySound("weapons/grenadeshot",CHAN_WEAPON);
			A_MarineShot("GyroGrenade");
		}
		#### E 4;
		#### E 0 A_MonsterRefire(20,"see");
		goto missile;

	shootpistol:
		#### E 1 A_LeadTarget1();
		#### E 1{
			class<actor> mn="HDBullet9";
			A_LeadTarget2(shotspeed:getdefaultbytype(mn).speed,adjusttics:random(1,4));
			hdmobai.DropAdjust(self,mn);
		}
		#### F 1 bright light("SHOT"){
			pistolloaded--;
			A_PlaySound("weapons/pistol",CHAN_WEAPON);
			A_MarineShot("HDBullet9");
			if(!random(0,3))A_AlertMonsters(0,bfriendly?AMF_TARGETEMITTER:0);
		}
		#### E random(1,4) A_SpawnItemEx("HDSpent9mm",
			cos(pitch)*12,0,height-7-sin(pitch)*12,
			vel.x,vel.y,vel.z,
			0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		#### E 0 A_MonsterRefire(20,"see");
		goto missile;
	noshot:
		#### E 6;
		goto see;

	ohforfuckssake:
		#### E 4 A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);

	reload:
		#### A 0{
			if(
				pistolloaded<1
				||wep==HDMW_SMG
				||wep==HDMW_ZM66
			)setstatelabel("reloadmag");
			else if(gunloaded<gunmax){
				if(wep==HDMW_HUNTER)setstatelabel("reloadsg");
				if(wep==HDMW_ROCKET)setstatelabel("reloadrl");
			}else if(!glloaded&&wep!=HDMW_ROCKET)setstatelabel("reloadgl");
		}goto see;
	reloadsg:
		#### A 0 A_PlaySound("weapons/huntopen",CHAN_WEAPON);
		#### AB 3{hdmobai.chase(self,"melee",null,true);}
	reloadsgloop:
		#### A 0 A_PlaySound("weapons/pocket",5);
		#### CDAB 3{hdmobai.chase(self,"melee",null,true);}
		#### BBC 3{
			if(!random(0,1))hdmobai.chase(self,"melee",null,true);
			if(gunloaded<gunmax){
				gunloaded++;
				A_PlaySound("weapons/sshotl",CHAN_WEAPON);
			}
		}
		#### A 0 A_JumpIf(gunloaded<gunmax,"reloadsgloop");
		goto see;
	reloadrl:
		#### A 0 A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
		#### AB 3{hdmobai.chase(self,"melee",null,true);}
	reloadrlloop:
		#### A 0 A_PlaySound("weapons/pocket",5);
		#### CDAB 3{hdmobai.chase(self,"melee",null,true);}
		#### C 4{
			if(!random(0,3))hdmobai.chase(self,"melee",null,true);
			if(gunloaded<gunmax){
				gunloaded++;
				A_PlaySound("weapons/rockreload",CHAN_WEAPON);
			}
		}
		#### A 0 A_JumpIf(gunloaded<gunmax,"reloadsgloop");
		goto see;
	reloadmag:
		#### AB 3{hdmobai.chase(self,"melee",null,true);}
		#### C 3{
			hdmobai.chase(self,"melee",null,true);
			A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
			A_PlaySound("weapons/rifleload",5);
			class<actor> oldthing="";
			if(
				pistolloaded<1
				&&(
					gunloaded<1
					||wep!=HDMW_SMG
					||wep!=HDMW_ZM66
				)
			)oldthing="HDPistolEmptyMag";
			else if(wep==HDMW_SMG)oldthing="HDSMGEmptyMag";
			else if(wep==HDMW_ZM66)oldthing="HD4mmMagEmpty";
			if(oldthing){
				actor ooo=spawn(oldthing,pos+(0,0,40));
				ooo.vel+=vel;
			}
		}
		#### DABC 3{hdmobai.chase(self,"melee",null,true);}
		#### D 2 A_PlaySound("weapons/rifleload",5);
		#### A 3{
			A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
			hdmobai.chase(self,"melee",null);
			if(
				pistolloaded<1
				&&(
					gunloaded<1
					||wep!=HDMW_SMG
					||wep!=HDMW_ZM66
				)
			)pistolloaded=15;
			else gunloaded=gunmax;
		}
		goto see;
	reloadgl:
		#### A 0 A_PlaySound("weapons/grenopen",CHAN_WEAPON);
		#### ABCD 3{hdmobai.chase(self,"melee",null,true);}
		#### AB 2 A_PlaySound("weapons/rockreload",5);
		#### C 3{
			A_PlaySound("weapons/grenopen",CHAN_WEAPON);
			hdmobai.chase(self,"melee",null);
			glloaded=1;
		}
		#### D 4;
		goto see;

	melee:
		#### C 7 A_FaceTarget();
		#### D 2;
		#### E 6 A_CustommeleeAttack(
			random(10,100),"weapons/smack","","none",randompick(0,0,0,1)
		);
		#### ABCD 2{
			if(target&&!target.bcorpse&&distance3d(target)-target.radius<meleerange){
				setstatelabel("melee");
				return;
			}
			if(gunloaded>0){
				setstatelabel("missile");
				return;
			}
			A_FaceTarget(0,0);
			A_Recoil(-3);
		}goto see;
	pain:
		#### G 3;
		#### G 3 A_Pain();
		#### G 0 A_Jump(100,"see");
		#### AB 2 A_FaceTarget(50,50);
		#### CD 3 A_FastChase();
		#### G 0 A_CPosRefire();
		goto missile;

	death.bleedout:
		#### H 5{
			hdmobai.corpseflags(self);
			bpushable=false;
			A_SpawnItemEx("tempshield",0,0,0,vel.x,vel.y,vel.z,0,SXF_SETMASTER);
		}
		#### I 5;
		goto deathpostscream;
	death:
		#### H 5{
			hdmobai.corpseflags(self);
			bpushable=false;
			A_SpawnItemEx("tempshield2",0,0,0,vel.x,vel.y,vel.z,0,SXF_SETMASTER);
		}
		#### I 5 A_HDMScream();
	deathpostscream:
		#### J 5 noblockwepdrop();
		#### K 5;
		goto dead;

	dead:
		#### K 3 canraise A_JumpIf(abs(vel.z)<2.,1);
		loop;
		#### LMN 5 canraise A_JumpIf(abs(vel.z)>=2.,"dead");
		wait;
	raise:
		#### A 0{
			hdmobai.corpseflags(self);
			A_SetSolid();
			if(bfriendly)bpushable=true;
			if(countinv("IsGibbed"))setstatelabel("raisegibbed");
			A_TakeInventory("IsGibbed");
		}
		#### MMK 7 A_SpawnItemEx("MegaBloodSplatter",0,0,4,
			vel.x,vel.y,vel.z,0,
			SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
		);
		#### JHE 4;
		#### H 0{
			scale.x=1;
			if(!random(0,15+timesdied))return;
			else if(!random(0,10-timesdied))A_Die("raisebotch");
			else{
				speed=max(1,speed-random(0,1));
				health=max(50,health-random(0,3*timesdied));
				seesound="grunt/sight";
				painsound="grunt/pain";
				deathsound="grunt/death";
				A_PlaySound(seesound,CHAN_VOICE);
			}
		}goto see;

	xdeath:
		#### O 5{
			hdmobai.corpseflags(self);
			bpushable=false;
			A_GiveInventory("IsGibbed");
			A_UnsetShootable(); 
		}
		#### P 5{
			A_SpawnItemEx("MegaBloodSplatter",0,0,34,flags:SXF_NOCHECKPOSITION);
			A_XScream();
		}
		#### Q 5{
			A_SpawnItemEx("MegaBloodSplatter",0,0,34,flags:SXF_NOCHECKPOSITION);
			noblockwepdrop();
		}
		#### Q 0 A_SpawnItemEx("MegaBloodSplatter",0,0,34,flags:SXF_NOCHECKPOSITION);
		#### RSTUV 5;
	xdead:
		#### W -1 canraise;
		stop;
	death.raisebotch:
		#### O 0{hdmobai.corpseflags(self);}
	xdeathbrewtlelulz:
		#### O 5{
			A_NoBlocking();
			A_UnsetShootable();
			A_SpawnItemEx("MegaBloodSplatter",0,0,34,flags:SXF_NOCHECKPOSITION);
			A_GiveInventory("IsGibbed");
		}
		#### P 5 A_XScream();
		#### QR 5 A_SpawnItemEx("MegaBloodSplatter",0,0,34,flags:SXF_NOCHECKPOSITION);
		#### STUV 5;
		#### W -1 canraise;
		stop;
	raisegibbed:
		#### W 0 A_JumpIf((random(1,12)-timesdied)<5,"RaiseZombie");
		#### WW 8 A_SpawnItemEx("MegaBloodSplatter",
			0,0,4,vel.x,vel.y,vel.z,
			0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
		);
		#### VUT 7;
		#### SRQ 5;
		#### POH 4;
		#### I 1 A_Die("raisedrop");
	death.raisedrop:
		#### H 5{
			timesdied+=4;
			hdmobai.corpseflags(self);
			bpushable=false;
			A_SpawnItemEx("tempshield2",0,0,0,vel.x,vel.y,vel.z,0,SXF_SETMASTER);
		}
		#### IJK 5;
		goto dead;
	raisezombie:
		#### U 4{
			A_UnsetShootable();
			A_SpawnItemEx("MegaBloodSplatter",0,0,4,
				vel.x,vel.y,vel.z+3,0,
				SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
			);
		}
		#### U 8;
		#### T 4;
		#### T 2 A_PlaySound("weapons/bigcrack",6);
		POSS S 2 A_PlaySound("misc/wallchunks",7);
		POSS AAAAA 0 A_SpawnItemEx("HugeWallChunk",0,0,40,random(4,6),0,random(-2,7),random(1,360));
		#### SRQ 6;
		#### PONMH 4;
		#### IJKL 4;
		#### M 0{spawn("DeadZombieStormtrooper",pos);}
		stop;
	}
}

class Rifleman:HDMarine{default{accuracy HDMW_ZM66+1;}}
class BlackRifleman:HDMarine{default{accuracy HDMW_ZM66+1;stamina 3;}}
class BrownRifleman:HDMarine{default{accuracy HDMW_ZM66+1;stamina 2;}}
class WhiteRifleman:HDMarine{default{accuracy HDMW_ZM66+1;stamina 1;}}
class RifleFistman:Rifleman replaces MarineFist{}
class RifleChaingunman:Rifleman replaces MarineChaingun{}

class Enforcer:HDMarine{default{accuracy HDMW_HUNTER+1;}}
class BlackEnforcer:HDMarine{default{accuracy HDMW_HUNTER+1;stamina 3;}}
class BrownEnforcer:HDMarine{default{accuracy HDMW_HUNTER+1;stamina 2;}}
class WhiteEnforcer:HDMarine{default{accuracy HDMW_HUNTER+1;stamina 1;}}
class EnforcerShot:Enforcer replaces MarineShotgun {}
class EnforcerSuperShot:Enforcer replaces MarineSSG {}
class EnforcerNoShot:Enforcer replaces MarineBerserk {}

class Infiltrator:HDMarine{default{accuracy HDMW_SMG+1;}}
class BlackInfiltrator:HDMarine{default{accuracy HDMW_SMG+1;stamina 3;}}
class BrownInfiltrator:HDMarine{default{accuracy HDMW_SMG+1;stamina 2;}}
class WhiteInfiltrator:HDMarine{default{accuracy HDMW_SMG+1;stamina 1;}}
class InfiltratorPistol:Infiltrator replaces MarinePistol{}
class InfiltratorChainsaw:Infiltrator replaces MarineChainsaw{}

class Rocketeer:HDMarine{default{accuracy HDMW_ROCKET+1;}}
class BlackRocketeer:HDMarine{default{accuracy HDMW_ROCKET+1;stamina 3;}}
class BrownRocketeer:HDMarine{default{accuracy HDMW_ROCKET+1;stamina 2;}}
class WhiteRocketeer:HDMarine{default{accuracy HDMW_ROCKET+1;stamina 1;}}
class RRocketeer:Rocketeer replaces MarineRocket{}
class BFuglyteer:Rocketeer replaces MarineBFG{}
class Plasmateer:Rocketeer replaces MarinePlasma{}
class Railgunteer:Rocketeer replaces MarineRailgun{}


class Tango:HDMarine{default{-friendly}}
class BlackTango:Tango{default{stamina 3;}}
class BrownTango:Tango{default{stamina 2;}}
class WhiteTango:Tango{default{stamina 1;}}

class RifleTango:Tango{default{accuracy HDMW_ZM66+1;}}
class BlackRifleTango:Tango{default{accuracy HDMW_ZM66+1;stamina 3;}}
class BrownRifleTango:Tango{default{accuracy HDMW_ZM66+1;stamina 2;}}
class WhiteRifleTango:Tango{default{accuracy HDMW_ZM66+1;stamina 1;}}

class ShotTango:Tango{default{accuracy HDMW_HUNTER+1;}}
class BlackShotTango:Tango{default{accuracy HDMW_HUNTER+1;stamina 3;}}
class BrownShotTango:Tango{default{accuracy HDMW_HUNTER+1;stamina 2;}}
class WhiteShotTango:Tango{default{accuracy HDMW_HUNTER+1;stamina 1;}}

class SMGTango:Tango{default{accuracy HDMW_SMG+1;}}
class BlackSMGTango:Tango{default{accuracy HDMW_SMG+1;stamina 3;}}
class BrownSMGTango:Tango{default{accuracy HDMW_SMG+1;stamina 2;}}
class WhiteSMGTango:Tango{default{accuracy HDMW_SMG+1;stamina 1;}}

class RocketTango:Tango{default{accuracy HDMW_ROCKET+1;}}
class BlackRocketTango:Tango{default{accuracy HDMW_ROCKET+1;stamina 3;}}
class BrownRocketTango:Tango{default{accuracy HDMW_ROCKET+1;stamina 2;}}
class WhiteRocketTango:Tango{default{accuracy HDMW_ROCKET+1;stamina 1;}}



// ------------------------------------------------------------
// Marine corpse
// ------------------------------------------------------------
class UndeadRifleman:HDMarine{
	default{accuracy HDMW_ZM66+1;}
	override void postbeginplay(){
		super.postbeginplay();
		timesdied++;
		hasdropped=true;
		speed=max(1,speed-random(0,2));
		health=max(50,health-random(0,6));
		seesound="grunt/sight";
		painsound="grunt/pain";
		deathsound="grunt/death";
	}
}
class DeadRifleman:HDMarine replaces DeadMarine{
	override void postbeginplay(){
		super.postbeginplay();
		hasdropped=true;
		A_Die("spawndead");
	}
	states{
	death.spawndead:
		---- A 0{
			A_NoBlocking();
			hdmobai.corpseflags(self);
		}goto dead;
	}
}
class ReallyDeadRifleman:DeadRifleman replaces GibbedMarine{
	states{
	death.spawndead:
		---- A 0{
			A_NoBlocking();
			hdmobai.corpseflags(self);
			A_UnsetShootable();
			timesdied++;
			A_GiveInventory("IsGibbed");
		}goto xdead;
	}
}
class DeadRiflemanCrouched:DeadRifleman{
	states{
	death.spawndead:
		PLYC A 0;
		goto super::death.spawndead;
	raise:
		PLAY A 0;
		goto super::raise;
	}
}
class ReallyDeadRiflemanCrouched:ReallyDeadRifleman replaces GibbedMarineExtra{
	states{
	death.spawndead:
		PLYC A 0;
		goto super::death.spawndead;
	raise:
		PLAY A 0;
		goto super::raise;
	}
}



// ------------------------------------------------------------
// Raging Erech shun.
// ------------------------------------------------------------
class GhostMarine:HDActor{
	bool A_GhostShot(actor victim){
		if(!victim||absangle(angle,angleto(victim))>20)return false;
		bool np=victim.bnopain;
		bool nf=victim.bnofear;
		if(np&&nf){
			target=null;
			return false;
		}

		int tmp=victim.painchance;
		int thlt=victim.health;
		victim.health+=0;
		victim.painchance=256;
		victim.bnopain=false;
		victim.bnofear=false;
		victim.bfrightened=true;
		victim.damagemobj(self,self,50,
			"GhostSquadAttack",DMG_THRUSTLESS|DMG_NO_ARMOR|DMG_NO_FACTOR
		);

		//in case target destroyed
		if(!victim)return true;

		//reset
		victim.painchance=tmp;
		victim.bnopain=np;
		victim.bnofear=nf;
		if(victim.health>1)victim.health=thlt-1;
		return true;
	}
	int gonnaleave;
	override void beginplay(){
		super.beginplay();
		gonnaleave=0;

		//appearance
		if(master&&teamplay){
			translation=master.translation;
		}else{
			string trnsl="Rifleman";

			int melanin=random(0,2);
			if(!melanin)trnsl=string.format("White%s",trnsl);
			else if(melanin==1)trnsl=string.format("Brown%s",trnsl);
			else if(melanin==2)trnsl=string.format("Black%s",trnsl);

			A_SetTranslation(trnsl);
		}

		if(random(0,1)){
			painsound="marinef/pain";
			deathsound="marinef/death";
		}else{
			painsound="marine/pain";
			deathsound="marine/death";
		}
	}
	default{
		+noblooddecals
		+shootable +noblockmonst +ghost +shadow -solid -pushable
		+nopain +nofear +seeinvisible +nodamage +nonshootable
		+noclip
		+frightening
		+friendly
		damagefactor "GhostSquadAttack",0;
		maxdropoffheight 40;
		maxstepheight 40;
		health 200000000;
		gibhealth 500;
		renderstyle "add";
		bloodtype "idledummy";
		seesound "imp/sight";
		height 52;
		radius 7;
		speed 8;
		dropitem "SquadSummoner",8;
	}
	states{
	spawn:
		PLAY A 0;
		#### E 10 A_Look();
		wait;
	see:
		#### AABBCCDD 2 A_Chase();
		#### A 0{
			if(!random(0,7))A_AlertMonsters(0,AMF_TARGETEMITTER);
			A_ClearTarget();
			health=spawnhealth();
			gonnaleave++;
			if(gonnaleave>=360)A_Die("fade");
		}loop;
	death.fade:
		#### A 0 A_NoBlocking();
	fade:
		#### ABCD 2{
			A_Wander();
			A_FadeOut(0.1);
		}loop;
	missile:
		#### E 1{
			if(bfriendly)A_AlertMonsters(0,AMF_TARGETEMITTER);
			if(!deathmatch)gonnaleave=0;
			A_SetTics(random(0,3));
		}
	missile2:
		#### E 1 A_FaceTarget(0,0);
		#### F 1 bright light("SHOT"){
			if(!A_GhostShot(target)){
				A_SetTics(0);
				return;
			}
			A_PlaySound("weapons/smgfire",CHAN_WEAPON);
			pitch+=frandom(-1,1);
			if(!random(0,7))A_AlertMonsters(0,AMF_TARGETEMITTER);
		}
		#### E 1 A_SetTics(random(1,4));
		#### A 0 A_MonsterRefire(20,"see");
		goto missile2;
	melee:
		#### E 0{
			if(!deathmatch)gonnaleave=0;
		}
		#### C 8 A_FaceTarget(0,0);
		#### D 4;
		#### E 4{
			if(target&&distance3d(target)<56&&A_GhostShot(target)){
				A_PlaySound("weapons/smack",CHAN_WEAPON);
			}
		}
		#### E 4 A_FaceTarget(0,0);
		goto see;

	pain:
		#### G 4;
		#### G 4 A_Pain();
		#### G 0 A_Jump(100,"see");
		#### AB 2 A_FaceTarget(0,0);
		#### CD 3 A_FastChase();
		#### G 0 A_CPosRefire();
		#### E 0 A_Jump(256,"missile");
	death:
	xdeath:
		#### H 6;
		#### I 6 A_Scream();
		#### J 6 A_NoBlocking();
		#### KKKLLLMMM 2 A_FadeOut(0.1);
		#### N 2 A_FadeOut(0.1);
		wait;
	raise:
		stop;
	}
}
class GhostGyroGrenade:GyroGrenade{
	default{
		 +forcepain +nodamage
		renderstyle "add";
		damagetype "GhostSquadAttack";
	}
	override void ExplodeSlowMissile(line blockingline=null,actor blockingobject=null){
		let gm=GhostMarine(target);
		if(!gm)return;
		actor tb=gm.target;
		blockthingsiterator itt=blockthingsiterator.create(self,512);
		while(itt.next()){
			actor it=itt.thing;
			if(
				!gm.isfriend(it)
				&&!gm.isteammate(it)
			){
				gm.A_GhostShot(it);
			}
		}
		gm.target=tb;
		bmissile=false;
		setstatelabel("death");
	}
	states{
	death:
		TNT1 A 0{gravity=0;}
		TNT1 AAAAAAAAAAAA 0 A_SpawnItemEx(
			"HugeWallChunk",0,0,0,
			random(-7,7),random(-7,7),random(4,18),
			random(0,360),160
		);
		TNT1 AA 0 A_SpawnItemEx("HDBBWTH",
			random(-1,1),random(-1,1),2,
			flags:SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS
		);
		TNT1 A 2 A_SpawnItemEx("HDBBWTH",zvel:2,
			flags:SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS
		);
		TNT1 AAA 0 A_SpawnItemEx("HDSmoke",
			random(-6,6),random(-6,6),1,
			random(-1,4),random(-1,1),0,
			random(-15,15),SXF_NOCHECKPOSITION
		);
		TNT1 A 21{
			A_AlertMonsters();
			spawn("DistantRocket");
			A_Quake(2,21,0,200,"none");
		}stop;
	}
}

class SquadSummoner:HDPickup{
	default{
		+inventory.fancypickupsound
		+forcexybillboard
		inventory.maxamount 7;
		inventory.interhubamount 7;
		inventory.icon "PLHELMA0";
		inventory.pickupsound "misc/p_pkup";
		inventory.pickupmessage "Picked up a summoning talisman.";
	}
	states{
	spawn2:
		PRIF A -1;
	use:
		TNT1 A 0{
			A_PlaySound("misc/p_pkup",CHAN_AUTO,attenuation:ATTN_NONE);
			A_AlertMonsters();
			A_SpawnItemEx("GhostMarine",0,0,0,-8,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("GhostMarine",0,0,0,0,5,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("GhostMarine",0,0,0,0,-5,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("HDSmoke",0,0,0,8,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("HDSmoke",0,0,0,0,5,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("HDSmoke",0,0,0,0,-5,0,0,SXF_NOCHECKPOSITION);

			string deadawaken;
			int da=random(0,3);
			if(da==0)deadawaken="\cj'They shall stand again and hear there\n\cja horn in the hills ringing.\n\n\cjWhose shall the horn be?'";
			else if(da==1)deadawaken="\cj'For this war will last through years uncounted\n\n\cjand you shall be summoned once again ere the end.'";
			else if(da==2)deadawaken="\cj'Faint cries I heard,and dim horns blowing,\n\n\cjand a murmur as of countless far voices:\n\n\n\cjit was like the echo of some forgotten battle\n\n\cjin the Dark Years long ago.'";
			else if(da==3)deadawaken="\cj'Pale swords were drawn; but I know not\n\n\cjwhether their blades would still bite,\n\n\n\cjfor the Dead needed no longer\n\n\cjany weapon but fear.'";

			A_PrintBold(deadawaken,8);
		}stop;
	}
}




// ------------------------------------------------------------
// A replacement.
// ------------------------------------------------------------
class BotBot:HDMarine{
	default{
		+noblockmonst
		+nofear
		species "Player";
		obituary "%o died.";
	}
	override int damagemobj(
		actor inflictor,actor source,int damage,
		name mod,int flags=0,double angle=0
	){
		//abort if zero team damage, otherwise save factor for wounds and burns
		if(
			source!=self
			&&(
				isteammate(source)
				||(
					!deathmatch&&
					(source.player||botbot(source))
				)
			)
		){
			if(!teamdamage)return 0;
			else damage*=teamdamage;
		}

		int dmmm=super.damagemobj(
			inflictor,source,damage,mod,flags,angle
		);
		if(health<1&&masterplayer>=0){
			actor rpp=players[masterplayer].mo;
			if(rpp){
				rpp.A_SetShootable();
				rpp.damagemobj(inflictor,source,rpp.health,mod,flags|DMG_FORCED);
			}
		}
		return dmmm;
	}
	int warptimer;
	int unseen;
	bool seen;
	vector3 oldppos;
	override void tick(){
		super.tick();
		if(masterplayer<1)return;
		actor rpp=players[masterplayer].mo;
		if(rpp)rpp.setorigin(pos,false);

		if(!bfriendly||timesdied>0||target){
			unseen=0;
			return;
		}

		warptimer++;
		if(!(warptimer%35)){
			seen=false;
			warptimer=0;
			for(int i=0;i<MAXPLAYERS;i++){
				if(
					playeringame[i]&&!players[i].bot&&players[i].mo
					&&checksight(players[i].mo)
				){
					seen=true;
					unseen=0;
				}
			}
			if(!seen)unseen++;
			if(unseen==HDMBC_WARPLIMIT){
				gunloaded=gunmax;
				glloaded=true;
				pistolloaded=15;
				for(int i=0;i<MAXPLAYERS;i++){
					if(
						playeringame[i]&&!players[i].bot&&players[i].mo
					){
						oldppos=players[i].mo.pos;
						break;
					}
				}
			}else if(unseen>HDMBC_WARPLIMIT){
				vector3 posbak=pos;
				setorigin(oldppos,false);
				for(int i=0;i<MAXPLAYERS;i++){
					if(
						playeringame[i]&&!players[i].bot&&players[i].mo
						&&(absangle(
							players[i].mo.angle,
							players[i].mo.angleto(self)
						)<100)
					){
						seen=true;
						unseen--;
					}
				}
				if(unseen>HDMBC_WARPLIMIT+3){
					unseen=0;
					seen=true;
					warptimer=0;
					A_PlaySound(seesound,CHAN_VOICE);
					spawn("HDSmoke",pos);
				}else{
					setorigin(posbak,false);
				}
			}
		}
	}
	override void A_HDMScream(){
		if(master)master.A_PlayerScream();
		master=null;masterplayer=-1;
	}
	int masterplayer;
	override void postbeginplay(){
		HDActor.postbeginplay();
		if(!master)master=players[0].mo;
		masterplayer=master.playernumber();

		int pgend;
		if(playeringame[masterplayer])pgend=players[masterplayer].getgender();
		else pgend=random(0,3);
		if(!pgend){
			painsound="marine/pain";
			deathsound="marine/death";
		}
		else if(pgend==1){
			painsound="marinef/pain";
			deathsound="marinef/death";
		}
		else if(pgend==2){
			painsound="marineb/pain";
			deathsound="marineb/death";
		}
	}
}


